package com.breezing.health.util;import com.breezing.health.R;import com.breezing.health.providers.Breezing.Account;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import android.content.Context;import android.database.Cursor;import android.util.Log;public class DateFormatUtil {    private final static String TAG = "DateFormatUtil";    private DateFormatUtil() {    }    /***     * 获得现在日期格式并转化为int类型     * @param format     * @return     */    public static int simpleDateFormat(String format) {        SimpleDateFormat sdf = new SimpleDateFormat(format);        String strDate = sdf.format(new Date());        Log.d(TAG, "format = " + format + " sdf.format(new Date())  = " +  sdf.format(new Date()));        Date date = null;        try {            date =  sdf.parse(strDate);        } catch (ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        Log.d(TAG, " simpleDateFormat date = " + date);        int intDate = Integer.parseInt(strDate);        Log.d(TAG, "simpleDateFormat longDate = " + intDate);        return intDate;    }    /***     * 根据现在日期格式并转化为int类型     * @param format     * @return     */    public static int simpleDateFormat(String format, String strDate) {        SimpleDateFormat sdf = new SimpleDateFormat(format);        Log.d(TAG, "format = " + format + " sdf.format(new Date())  = " +  sdf.format(new Date()) + " strDate = " + strDate);        int intDate = Integer.parseInt(strDate);        Log.d(TAG, "simpleDateFormat longDate = " + intDate);        return intDate;    }    /***     *     * @param year     * @param month     * @return     */    public static int getActualMaxDay(int year, int month) {        Calendar calendar = Calendar.getInstance();        calendar.set( Calendar.YEAR, year );        calendar.set( Calendar.MONTH, month -1 );        calendar.set( Calendar.DAY_OF_MONTH, 1 );        int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);        Log.d(TAG, " getActualMaxDay   day  =  "+ day);        return day;    }    /***     * 按照 yyyyMMdd 格式获得完整的日期，通过年，月，日     * @param year     * @param month     * @param day     * @return     */    public static int getCompleteDate(int year, int month, int day) {        StringBuilder stringBuilder = new StringBuilder();        stringBuilder.setLength(0);        stringBuilder.append(year);        if ( month < 10 ) {            stringBuilder.append("0").append(month);        } else {            stringBuilder.append(month);        }        if ( day < 10 ) {            stringBuilder.append("0").append(day);        } else {            stringBuilder.append(day);        }        int date = DateFormatUtil.simpleDateFormat("yyyyMMdd", stringBuilder.toString());        return date;    }    /***     * 按照 yyyyww 格式获得完整的年周，通过年，周     * @param year     * @param month     * @param day     * @return     */    public static int getCompleteWeek(int year, int week) {        StringBuilder stringBuilder = new StringBuilder();        stringBuilder.setLength(0);        stringBuilder.append(year);        if ( week < 10 ) {            stringBuilder.append("0").append(week);        } else {            stringBuilder.append(week);        }        int yearWeek = DateFormatUtil.                simpleDateFormat("yyyyww", stringBuilder.toString() );        return yearWeek;    }    /***     * 按照 yyyyww 格式获得完整的年周，通过年，周     * @param year     * @param month     * @param day     * @return     */    public static int getCompleteYearMonth(int year, int month) {        StringBuilder stringBuilder = new StringBuilder();        stringBuilder.setLength(0);        stringBuilder.append(year);        if ( month < 10 ) {            stringBuilder.append("0").append(month);        } else {            stringBuilder.append(month);        }        int yearWeek = DateFormatUtil.                simpleDateFormat("yyyyMM", stringBuilder.toString() );        return yearWeek;    }                /***     *     * @param context     * @param date     * @return     */    public static  String getCurrentDateString(Context context, int date) {        Log.d(TAG, " getCurrentDateString date = " + date);        String result;        int  year = 0;        int  month = 0;        int  day = 0;        String dateString = String.valueOf(date);        if (dateString.length() == NERGY_COST_DATE_LEN) {            year = Integer.valueOf( String.valueOf(date).                    subSequence(0, ENERGY_COST_YEAR).toString() );            month = Integer.valueOf( String.valueOf(date).subSequence(ENERGY_COST_YEAR ,                        ENERGY_COST_YEAR + ENERGY_COST_MONTH ).toString() );            day = Integer.valueOf( String.valueOf(date).subSequence( ENERGY_COST_YEAR + ENERGY_COST_MONTH  ,                         String.valueOf(date).length() ).toString() );            Log.d(TAG, "getCurrentDateString year = " + year + " month = " + month + " day =" +  day  );        }        result = context.getString(R.string.breezing_date,                year,                month,                day );        Log.d(TAG, " getCurrentDateString result = " + result);        return result;    }    /***     *     * @param context     * @param year     * @param month     * @param day     * @return     */    public static  String getCurrentDateString(Context context, int year, int month, int day) {        String result;        Log.d(TAG, "getCurrentDateString = " + year + " month = " + month + " day =" +  day  );        result = context.getString(R.string.breezing_date, year, month , day);        Log.d(TAG, " getCurrentDateString result = " + result);        return result;    }    private final static int ACCOUNT_ID_INDEX = 0;    private static final int NERGY_COST_DATE_LEN = 8;    private static final int ENERGY_COST_YEAR = 4;    private static final int ENERGY_COST_MONTH = 2;    private static final int ENERGY_COST_DAY = 2;}