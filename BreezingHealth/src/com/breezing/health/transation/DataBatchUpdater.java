package com.breezing.health.transation;import com.breezing.health.providers.Breezing.FoodClassify;import com.breezing.health.providers.Breezing.HeatIngestion;import com.breezing.health.providers.Breezing.Information;import com.breezing.health.providers.Breezing.WeightChange;import android.content.ContentProviderOperation;import android.util.Log;import java.util.ArrayList;public class DataBatchUpdater {}class WeightChangeUpdater extends DataRowModify {    @Override    public void buildOperation(String[] RowData, ArrayList<ContentProviderOperation> ops) {        Log.d(DataTaskService.TAG, " WeightChangeUpdater buildOperation");        if (RowData == null ) {            ops.add(ContentProviderOperation.newDelete(WeightChange.CONTENT_URI)                    .build());        } else {            ops.add(ContentProviderOperation.newInsert(WeightChange.CONTENT_URI)                    .withValue(WeightChange.ACCOUNT_ID, RowData[0])                    .withValue(WeightChange.WEIGHT, RowData[1])                    .withValue(WeightChange.EXPECTED_WEIGHT, RowData[2])                    .build());        }    }}class InformationUpdater extends DataRowModify {    public InformationUpdater() {    }    @Override    public void buildOperation(String[] RowData, ArrayList<ContentProviderOperation> ops) {        Log.d(DataTaskService.TAG, " InformationUpdater buildOperation");        if (RowData == null ) {            ops.add(ContentProviderOperation.newDelete(Information.CONTENT_URI)                    .build());        } else {            ops.add(ContentProviderOperation.newInsert(Information.CONTENT_URI)                    .withValue(Information.ACCOUNT_ID, RowData[0])                    .withValue(Information.GENDER, RowData[1])                    .withValue(Information.HEIGHT, RowData[2])                    .withValue(Information.BIRTHDAY, RowData[3])                        .withValue(Information.CUSTOM, RowData[4])                    .withValue(Information.HEIGHT_UNIT, RowData[5])                    .withValue(Information.WEIGHT_UNIT, RowData[6])                        .withValue(Information.DISTANCE_UNIT, RowData[7])                       .build());        }    }}class FoodClassifyUpdater extends DataRowModify {    public FoodClassifyUpdater() {    }    @Override    public void buildOperation(String[] RowData, ArrayList<ContentProviderOperation> ops) {        Log.d(DataTaskService.TAG, " FoodClassifyUpdater buildOperation");        if (RowData == null ) {            ops.add(ContentProviderOperation.newDelete(FoodClassify.CONTENT_URI)                    .build());        } else {            ops.add(ContentProviderOperation.newInsert(FoodClassify.CONTENT_URI)                    .withValue(FoodClassify.FOOD_CLASSIFY_ID, RowData[0])                    .withValue(FoodClassify.FOOD_TYPE, RowData[1])                    .withValue(FoodClassify.SELECT_PICTURE, RowData[2])                                   .build());        }           }}class HeatIngestionUpdater extends DataRowModify {    public HeatIngestionUpdater() {    }    @Override    public void buildOperation(String[] RowData, ArrayList<ContentProviderOperation> ops) {        Log.d(DataTaskService.TAG, "HeatIngestionUpdater buildOperation");        if (RowData == null ) {            ops.add(ContentProviderOperation.newDelete(HeatIngestion.CONTENT_URI)                    .build());        } else {            if (RowData.length == 8) {                ops.add(ContentProviderOperation.newInsert(HeatIngestion.CONTENT_URI)                        .withValue(HeatIngestion.FOOD_CLASSIFY_ID, RowData[0])                        .withValue(HeatIngestion.FOOD_ID, RowData[1])                        .withValue(HeatIngestion.FOOD_NAME, RowData[2])                        .withValue(HeatIngestion.NAME_EXPRESS, RowData[3])                        .withValue(HeatIngestion.PRIORITY, RowData[4])                        .withValue(HeatIngestion.FOOD_QUANTITY, RowData[5])                        .withValue(HeatIngestion.CALORIE, RowData[6])                        .withValue(HeatIngestion.FOOD_PICTURE, RowData[7])                        .build());            } else {                ops.add(ContentProviderOperation.newInsert(HeatIngestion.CONTENT_URI)                        .withValue(HeatIngestion.FOOD_CLASSIFY_ID, RowData[0])                        .withValue(HeatIngestion.FOOD_ID, RowData[1])                        .withValue(HeatIngestion.FOOD_NAME, RowData[2])                        .withValue(HeatIngestion.NAME_EXPRESS, RowData[3])                        .withValue(HeatIngestion.PRIORITY, RowData[4])                        .withValue(HeatIngestion.FOOD_QUANTITY, RowData[5])                        .withValue(HeatIngestion.CALORIE, RowData[6])                        .build());            }        }    }}